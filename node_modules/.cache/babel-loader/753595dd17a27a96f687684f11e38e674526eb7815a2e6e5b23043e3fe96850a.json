{"ast":null,"code":"// 数据迁移工具：将旧的课程数据结构转换为新的结构\nexport function migrateCourseData(courses) {\n  return courses.map(course => {\n    // 如果已经是新格式，直接返回\n    if (course.fixedTimeSlots && Array.isArray(course.fixedTimeSlots)) {\n      return course;\n    }\n\n    // 如果是旧格式，进行转换\n    const migratedCourse = {\n      id: course.id,\n      name: course.name,\n      subject: course.subject || '未知学科',\n      teacherId: course.teacherId,\n      credits: course.credits || 2,\n      // 默认2学分\n      location: course.location || course.classroomId || undefined,\n      weeks: course.weeks || '1-16周',\n      fixedTimeSlots: []\n    };\n\n    // 如果有旧的 duration 和 frequency 信息，尝试生成默认的时间段\n    if (course.duration && course.frequency) {\n      // 创建默认的时间段（这只是一个示例，实际使用时需要用户重新设置）\n      const defaultTimeSlots = [];\n\n      // 简单的默认分配：周一到周五，从第1节开始\n      for (let i = 0; i < course.frequency; i++) {\n        const dayOfWeek = i % 5 + 1; // 1-5 (周一到周五)\n        const startSlot = 1 + Math.floor(i / 5) * course.duration;\n        const timeSlotIds = [];\n        for (let j = 0; j < course.duration; j++) {\n          timeSlotIds.push((startSlot + j).toString());\n        }\n        defaultTimeSlots.push({\n          dayOfWeek,\n          timeSlotIds\n        });\n      }\n      migratedCourse.fixedTimeSlots = defaultTimeSlots;\n    }\n    return migratedCourse;\n  });\n}\n\n// 检查并清理 localStorage 中的旧数据\nexport function cleanupOldData() {\n  const keys = ['courses', 'classrooms', 'classes', 'constraints'];\n  keys.forEach(key => {\n    const data = localStorage.getItem(key);\n    if (data) {\n      try {\n        const parsed = JSON.parse(data);\n\n        // 如果是课程数据，进行迁移\n        if (key === 'courses' && Array.isArray(parsed)) {\n          const migratedCourses = migrateCourseData(parsed);\n          localStorage.setItem(key, JSON.stringify(migratedCourses));\n          console.log('已迁移课程数据到新格式');\n        }\n\n        // 删除不再需要的数据\n        if (['classrooms', 'classes', 'constraints'].includes(key)) {\n          localStorage.removeItem(key);\n          console.log(`已清理旧数据: ${key}`);\n        }\n      } catch (error) {\n        console.warn(`清理数据 ${key} 时出错:`, error);\n        localStorage.removeItem(key);\n      }\n    }\n  });\n}","map":{"version":3,"names":["migrateCourseData","courses","map","course","fixedTimeSlots","Array","isArray","migratedCourse","id","name","subject","teacherId","credits","location","classroomId","undefined","weeks","duration","frequency","defaultTimeSlots","i","dayOfWeek","startSlot","Math","floor","timeSlotIds","j","push","toString","cleanupOldData","keys","forEach","key","data","localStorage","getItem","parsed","JSON","parse","migratedCourses","setItem","stringify","console","log","includes","removeItem","error","warn"],"sources":["D:/code/classtable/src/utils/dataMigration.ts"],"sourcesContent":["import { Course, FixedTimeSlot } from '../types';\r\n\r\n// 数据迁移工具：将旧的课程数据结构转换为新的结构\r\nexport function migrateCourseData(courses: any[]): Course[] {\r\n  return courses.map(course => {\r\n    // 如果已经是新格式，直接返回\r\n    if (course.fixedTimeSlots && Array.isArray(course.fixedTimeSlots)) {\r\n      return course as Course;\r\n    }\r\n\r\n    // 如果是旧格式，进行转换\r\n    const migratedCourse: Course = {\r\n      id: course.id,\r\n      name: course.name,\r\n      subject: course.subject || '未知学科',\r\n      teacherId: course.teacherId,\r\n      credits: course.credits || 2, // 默认2学分\r\n      location: course.location || course.classroomId || undefined,\r\n      weeks: course.weeks || '1-16周',\r\n      fixedTimeSlots: []\r\n    };\r\n\r\n    // 如果有旧的 duration 和 frequency 信息，尝试生成默认的时间段\r\n    if (course.duration && course.frequency) {\r\n      // 创建默认的时间段（这只是一个示例，实际使用时需要用户重新设置）\r\n      const defaultTimeSlots: FixedTimeSlot[] = [];\r\n      \r\n      // 简单的默认分配：周一到周五，从第1节开始\r\n      for (let i = 0; i < course.frequency; i++) {\r\n        const dayOfWeek = (i % 5) + 1; // 1-5 (周一到周五)\r\n        const startSlot = 1 + (Math.floor(i / 5) * course.duration);\r\n        const timeSlotIds: string[] = [];\r\n        \r\n        for (let j = 0; j < course.duration; j++) {\r\n          timeSlotIds.push((startSlot + j).toString());\r\n        }\r\n        \r\n        defaultTimeSlots.push({\r\n          dayOfWeek,\r\n          timeSlotIds\r\n        });\r\n      }\r\n      \r\n      migratedCourse.fixedTimeSlots = defaultTimeSlots;\r\n    }\r\n\r\n    return migratedCourse;\r\n  });\r\n}\r\n\r\n// 检查并清理 localStorage 中的旧数据\r\nexport function cleanupOldData() {\r\n  const keys = ['courses', 'classrooms', 'classes', 'constraints'];\r\n  \r\n  keys.forEach(key => {\r\n    const data = localStorage.getItem(key);\r\n    if (data) {\r\n      try {\r\n        const parsed = JSON.parse(data);\r\n        \r\n        // 如果是课程数据，进行迁移\r\n        if (key === 'courses' && Array.isArray(parsed)) {\r\n          const migratedCourses = migrateCourseData(parsed);\r\n          localStorage.setItem(key, JSON.stringify(migratedCourses));\r\n          console.log('已迁移课程数据到新格式');\r\n        }\r\n        \r\n        // 删除不再需要的数据\r\n        if (['classrooms', 'classes', 'constraints'].includes(key)) {\r\n          localStorage.removeItem(key);\r\n          console.log(`已清理旧数据: ${key}`);\r\n        }\r\n      } catch (error) {\r\n        console.warn(`清理数据 ${key} 时出错:`, error);\r\n        localStorage.removeItem(key);\r\n      }\r\n    }\r\n  });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}