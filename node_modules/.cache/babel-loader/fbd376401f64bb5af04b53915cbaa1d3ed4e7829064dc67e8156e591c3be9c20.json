{"ast":null,"code":"export class SchedulingAlgorithm {\n  constructor(courses, teachers, timeSlots) {\n    this.courses = void 0;\n    this.teachers = void 0;\n    this.timeSlots = void 0;\n    this.schedule = void 0;\n    this.courses = courses;\n    this.teachers = teachers;\n    this.timeSlots = timeSlots.sort((a, b) => a.order - b.order);\n    this.schedule = [];\n  }\n\n  // 主排课方法\n  generateSchedule() {\n    this.schedule = [];\n    const conflicts = [];\n    try {\n      // 根据每个课程的固定时间段生成课表\n      for (const course of this.courses) {\n        this.scheduleForCourse(course);\n      }\n\n      // 检查冲突\n      const detectedConflicts = this.detectConflicts();\n      conflicts.push(...detectedConflicts);\n      return {\n        schedule: this.schedule,\n        conflicts,\n        success: conflicts.length === 0,\n        message: conflicts.length === 0 ? '课表生成成功！' : `课表生成完成，但存在 ${conflicts.length} 个时间冲突`\n      };\n    } catch (error) {\n      return {\n        schedule: [],\n        conflicts,\n        success: false,\n        message: `生成失败: ${error instanceof Error ? error.message : '未知错误'}`\n      };\n    }\n  }\n\n  // 为单个课程排课\n  scheduleForCourse(course) {\n    // 根据课程的固定时间段生成课表条目\n    for (const fixedSlot of course.fixedTimeSlots) {\n      for (const timeSlotId of fixedSlot.timeSlotIds) {\n        const scheduleItem = {\n          id: `${course.id}-${fixedSlot.dayOfWeek}-${timeSlotId}`,\n          courseId: course.id,\n          teacherId: course.teacherId,\n          timeSlotId: timeSlotId,\n          dayOfWeek: fixedSlot.dayOfWeek,\n          location: course.location\n        };\n        this.schedule.push(scheduleItem);\n      }\n    }\n  }\n\n  // 检测冲突\n  detectConflicts() {\n    const conflicts = [];\n\n    // 检查时间冲突 - 同一时间段有多个课程\n    const timeConflicts = this.detectTimeConflicts();\n    conflicts.push(...timeConflicts);\n    return conflicts;\n  }\n\n  // 检测时间冲突\n  detectTimeConflicts() {\n    const conflicts = [];\n    const timeMap = new Map();\n\n    // 按时间段分组\n    this.schedule.forEach(item => {\n      const key = `${item.dayOfWeek}-${item.timeSlotId}`;\n      if (!timeMap.has(key)) {\n        timeMap.set(key, []);\n      }\n      timeMap.get(key).push(item);\n    });\n\n    // 检查每个时间段是否有冲突\n    timeMap.forEach((items, timeKey) => {\n      if (items.length > 1) {\n        const [dayOfWeek, timeSlotId] = timeKey.split('-');\n        const timeSlot = this.timeSlots.find(ts => ts.id === timeSlotId);\n        const dayName = ['', '周一', '周二', '周三', '周四', '周五', '周六', '周日'][parseInt(dayOfWeek)];\n        conflicts.push({\n          type: 'time',\n          message: `${dayName} ${(timeSlot === null || timeSlot === void 0 ? void 0 : timeSlot.name) || timeSlotId} 有多个课程安排`,\n          items: items\n        });\n      }\n    });\n    return conflicts;\n  }\n\n  // 计算时间段评分\n  calculateSlotScore(slot, course, classItem, teacher) {\n    let score = 100;\n\n    // 避免午休时间\n    if (this.constraints.lunchBreakSlots.includes(slot.timeSlotId)) {\n      score -= 20;\n    }\n\n    // 优先上午时间\n    const timeSlot = this.timeSlots.find(ts => ts.id === slot.timeSlotId);\n    if (timeSlot && timeSlot.order <= 4) {\n      score += 10;\n    }\n\n    // 避免周五下午\n    if (slot.dayOfWeek === 5 && timeSlot && timeSlot.order > 4) {\n      score -= 15;\n    }\n\n    // 检查班级当天已有课程数量\n    const dailyClasses = this.schedule.filter(s => s.classId === classItem.id && s.dayOfWeek === slot.dayOfWeek).length;\n    if (dailyClasses >= this.constraints.maxDailyHours) {\n      score -= 50;\n    }\n    return score;\n  }\n\n  // 分配教室\n  assignClassroom(course, dayOfWeek, timeSlotId) {\n    // 如果课程指定了教室\n    if (course.classroomId) {\n      const classroom = this.classrooms.find(c => c.id === course.classroomId);\n      if (classroom && !this.hasClassroomConflict(classroom.id, dayOfWeek, timeSlotId)) {\n        return classroom;\n      }\n    }\n\n    // 根据要求筛选教室\n    let availableClassrooms = this.classrooms.filter(classroom => {\n      // 检查容量\n      if (classroom.capacity < course.studentCount) return false;\n\n      // 检查类型要求\n      if (course.requirements.classroomType && classroom.type !== course.requirements.classroomType) return false;\n\n      // 检查设备要求\n      if (course.requirements.equipment) {\n        const hasAllEquipment = course.requirements.equipment.every(equipment => classroom.equipment.includes(equipment));\n        if (!hasAllEquipment) return false;\n      }\n\n      // 检查时间冲突\n      if (this.hasClassroomConflict(classroom.id, dayOfWeek, timeSlotId)) return false;\n      return true;\n    });\n\n    // 按容量排序，优先选择容量适中的教室\n    availableClassrooms.sort((a, b) => {\n      const aWaste = a.capacity - course.studentCount;\n      const bWaste = b.capacity - course.studentCount;\n      return aWaste - bWaste;\n    });\n    return availableClassrooms[0] || null;\n  }\n\n  // 检查教师冲突\n  hasTeacherConflict(teacherId, dayOfWeek, timeSlotId) {\n    return this.schedule.some(item => item.teacherId === teacherId && item.dayOfWeek === dayOfWeek && item.timeSlotId === timeSlotId);\n  }\n\n  // 检查班级冲突\n  hasClassConflict(classId, dayOfWeek, timeSlotId) {\n    return this.schedule.some(item => item.classId === classId && item.dayOfWeek === dayOfWeek && item.timeSlotId === timeSlotId);\n  }\n\n  // 检查教室冲突\n  hasClassroomConflict(classroomId, dayOfWeek, timeSlotId) {\n    return this.schedule.some(item => item.classroomId === classroomId && item.dayOfWeek === dayOfWeek && item.timeSlotId === timeSlotId);\n  }\n\n  // 检查是否可以安排连续时间段\n  canScheduleConsecutiveSlots(course, dayOfWeek, startTimeSlotId, classId, teacherId) {\n    const startSlot = this.timeSlots.find(ts => ts.id === startTimeSlotId);\n    if (!startSlot) return false;\n    const startIndex = this.timeSlots.indexOf(startSlot);\n\n    // 检查是否有足够的连续时间段\n    for (let i = 0; i < course.duration; i++) {\n      const slotIndex = startIndex + i;\n      if (slotIndex >= this.timeSlots.length) return false;\n      const timeSlot = this.timeSlots[slotIndex];\n\n      // 检查教师和班级冲突\n      if (this.hasTeacherConflict(teacherId, dayOfWeek, timeSlot.id) || this.hasClassConflict(classId, dayOfWeek, timeSlot.id)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // 检测冲突\n  detectConflicts() {\n    const conflicts = [];\n\n    // 检查教师冲突\n    const teacherConflicts = this.detectTeacherConflicts();\n    conflicts.push(...teacherConflicts);\n\n    // 检查教室冲突\n    const classroomConflicts = this.detectClassroomConflicts();\n    conflicts.push(...classroomConflicts);\n\n    // 检查班级冲突\n    const classConflicts = this.detectClassConflicts();\n    conflicts.push(...classConflicts);\n    return conflicts;\n  }\n  detectTeacherConflicts() {\n    const conflicts = [];\n    const teacherSchedule = new Map();\n\n    // 按教师分组\n    this.schedule.forEach(item => {\n      if (!teacherSchedule.has(item.teacherId)) {\n        teacherSchedule.set(item.teacherId, []);\n      }\n      teacherSchedule.get(item.teacherId).push(item);\n    });\n\n    // 检查每个教师的时间冲突\n    teacherSchedule.forEach((items, teacherId) => {\n      const timeMap = new Map();\n      items.forEach(item => {\n        const key = `${item.dayOfWeek}-${item.timeSlotId}`;\n        if (!timeMap.has(key)) {\n          timeMap.set(key, []);\n        }\n        timeMap.get(key).push(item);\n      });\n      timeMap.forEach(conflictItems => {\n        if (conflictItems.length > 1) {\n          const teacher = this.teachers.find(t => t.id === teacherId);\n          conflicts.push({\n            type: 'teacher',\n            message: `教师 ${(teacher === null || teacher === void 0 ? void 0 : teacher.name) || teacherId} 在同一时间段有多个课程安排`,\n            items: conflictItems\n          });\n        }\n      });\n    });\n    return conflicts;\n  }\n  detectClassroomConflicts() {\n    const conflicts = [];\n    const classroomSchedule = new Map();\n\n    // 按教室分组\n    this.schedule.forEach(item => {\n      if (!classroomSchedule.has(item.classroomId)) {\n        classroomSchedule.set(item.classroomId, []);\n      }\n      classroomSchedule.get(item.classroomId).push(item);\n    });\n\n    // 检查每个教室的时间冲突\n    classroomSchedule.forEach((items, classroomId) => {\n      const timeMap = new Map();\n      items.forEach(item => {\n        const key = `${item.dayOfWeek}-${item.timeSlotId}`;\n        if (!timeMap.has(key)) {\n          timeMap.set(key, []);\n        }\n        timeMap.get(key).push(item);\n      });\n      timeMap.forEach(conflictItems => {\n        if (conflictItems.length > 1) {\n          const classroom = this.classrooms.find(c => c.id === classroomId);\n          conflicts.push({\n            type: 'classroom',\n            message: `教室 ${(classroom === null || classroom === void 0 ? void 0 : classroom.name) || classroomId} 在同一时间段被多个课程占用`,\n            items: conflictItems\n          });\n        }\n      });\n    });\n    return conflicts;\n  }\n  detectClassConflicts() {\n    const conflicts = [];\n    const classSchedule = new Map();\n\n    // 按班级分组\n    this.schedule.forEach(item => {\n      if (!classSchedule.has(item.classId)) {\n        classSchedule.set(item.classId, []);\n      }\n      classSchedule.get(item.classId).push(item);\n    });\n\n    // 检查每个班级的时间冲突\n    classSchedule.forEach((items, classId) => {\n      const timeMap = new Map();\n      items.forEach(item => {\n        const key = `${item.dayOfWeek}-${item.timeSlotId}`;\n        if (!timeMap.has(key)) {\n          timeMap.set(key, []);\n        }\n        timeMap.get(key).push(item);\n      });\n      timeMap.forEach(conflictItems => {\n        if (conflictItems.length > 1) {\n          const classItem = this.classes.find(c => c.id === classId);\n          conflicts.push({\n            type: 'class',\n            message: `班级 ${(classItem === null || classItem === void 0 ? void 0 : classItem.name) || classId} 在同一时间段有多个课程安排`,\n            items: conflictItems\n          });\n        }\n      });\n    });\n    return conflicts;\n  }\n}","map":{"version":3,"names":["SchedulingAlgorithm","constructor","courses","teachers","timeSlots","schedule","sort","a","b","order","generateSchedule","conflicts","course","scheduleForCourse","detectedConflicts","detectConflicts","push","success","length","message","error","Error","fixedSlot","fixedTimeSlots","timeSlotId","timeSlotIds","scheduleItem","id","dayOfWeek","courseId","teacherId","location","timeConflicts","detectTimeConflicts","timeMap","Map","forEach","item","key","has","set","get","items","timeKey","split","timeSlot","find","ts","dayName","parseInt","type","name","calculateSlotScore","slot","classItem","teacher","score","constraints","lunchBreakSlots","includes","dailyClasses","filter","s","classId","maxDailyHours","assignClassroom","classroomId","classroom","classrooms","c","hasClassroomConflict","availableClassrooms","capacity","studentCount","requirements","classroomType","equipment","hasAllEquipment","every","aWaste","bWaste","hasTeacherConflict","some","hasClassConflict","canScheduleConsecutiveSlots","startTimeSlotId","startSlot","startIndex","indexOf","i","duration","slotIndex","teacherConflicts","detectTeacherConflicts","classroomConflicts","detectClassroomConflicts","classConflicts","detectClassConflicts","teacherSchedule","conflictItems","t","classroomSchedule","classSchedule","classes"],"sources":["D:/code/classtable/src/utils/schedulingAlgorithm.ts"],"sourcesContent":["import { \r\n  Course, \r\n  Teacher, \r\n  TimeSlot, \r\n  ScheduleItem, \r\n  Conflict \r\n} from '../types';\r\n\r\nexport interface SchedulingResult {\r\n  schedule: ScheduleItem[];\r\n  conflicts: Conflict[];\r\n  success: boolean;\r\n  message: string;\r\n}\r\n\r\nexport class SchedulingAlgorithm {\r\n  private courses: Course[];\r\n  private teachers: Teacher[];\r\n  private timeSlots: TimeSlot[];\r\n  private schedule: ScheduleItem[];\r\n\r\n  constructor(\r\n    courses: Course[],\r\n    teachers: Teacher[],\r\n    timeSlots: TimeSlot[]\r\n  ) {\r\n    this.courses = courses;\r\n    this.teachers = teachers;\r\n    this.timeSlots = timeSlots.sort((a, b) => a.order - b.order);\r\n    this.schedule = [];\r\n  }\r\n\r\n  // 主排课方法\r\n  public generateSchedule(): SchedulingResult {\r\n    this.schedule = [];\r\n    const conflicts: Conflict[] = [];\r\n\r\n    try {\r\n      // 根据每个课程的固定时间段生成课表\r\n      for (const course of this.courses) {\r\n        this.scheduleForCourse(course);\r\n      }\r\n\r\n      // 检查冲突\r\n      const detectedConflicts = this.detectConflicts();\r\n      conflicts.push(...detectedConflicts);\r\n\r\n      return {\r\n        schedule: this.schedule,\r\n        conflicts,\r\n        success: conflicts.length === 0,\r\n        message: conflicts.length === 0 \r\n          ? '课表生成成功！' \r\n          : `课表生成完成，但存在 ${conflicts.length} 个时间冲突`\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        schedule: [],\r\n        conflicts,\r\n        success: false,\r\n        message: `生成失败: ${error instanceof Error ? error.message : '未知错误'}`\r\n      };\r\n    }\r\n  }\r\n\r\n  // 为单个课程排课\r\n  private scheduleForCourse(course: Course): void {\r\n    // 根据课程的固定时间段生成课表条目\r\n    for (const fixedSlot of course.fixedTimeSlots) {\r\n      for (const timeSlotId of fixedSlot.timeSlotIds) {\r\n        const scheduleItem: ScheduleItem = {\r\n          id: `${course.id}-${fixedSlot.dayOfWeek}-${timeSlotId}`,\r\n          courseId: course.id,\r\n          teacherId: course.teacherId,\r\n          timeSlotId: timeSlotId,\r\n          dayOfWeek: fixedSlot.dayOfWeek,\r\n          location: course.location\r\n        };\r\n        \r\n        this.schedule.push(scheduleItem);\r\n      }\r\n    }\r\n  }\r\n\r\n  // 检测冲突\r\n  private detectConflicts(): Conflict[] {\r\n    const conflicts: Conflict[] = [];\r\n\r\n    // 检查时间冲突 - 同一时间段有多个课程\r\n    const timeConflicts = this.detectTimeConflicts();\r\n    conflicts.push(...timeConflicts);\r\n\r\n    return conflicts;\r\n  }\r\n\r\n  // 检测时间冲突\r\n  private detectTimeConflicts(): Conflict[] {\r\n    const conflicts: Conflict[] = [];\r\n    const timeMap = new Map<string, ScheduleItem[]>();\r\n\r\n    // 按时间段分组\r\n    this.schedule.forEach(item => {\r\n      const key = `${item.dayOfWeek}-${item.timeSlotId}`;\r\n      if (!timeMap.has(key)) {\r\n        timeMap.set(key, []);\r\n      }\r\n      timeMap.get(key)!.push(item);\r\n    });\r\n\r\n    // 检查每个时间段是否有冲突\r\n    timeMap.forEach((items, timeKey) => {\r\n      if (items.length > 1) {\r\n        const [dayOfWeek, timeSlotId] = timeKey.split('-');\r\n        const timeSlot = this.timeSlots.find(ts => ts.id === timeSlotId);\r\n        const dayName = ['', '周一', '周二', '周三', '周四', '周五', '周六', '周日'][parseInt(dayOfWeek)];\r\n        \r\n        conflicts.push({\r\n          type: 'time',\r\n          message: `${dayName} ${timeSlot?.name || timeSlotId} 有多个课程安排`,\r\n          items: items\r\n        });\r\n      }\r\n    });\r\n\r\n    return conflicts;\r\n  }\r\n\r\n  // 计算时间段评分\r\n  private calculateSlotScore(\r\n    slot: { dayOfWeek: number; timeSlotId: string },\r\n    course: Course,\r\n    classItem: Class,\r\n    teacher: Teacher\r\n  ): number {\r\n    let score = 100;\r\n\r\n    // 避免午休时间\r\n    if (this.constraints.lunchBreakSlots.includes(slot.timeSlotId)) {\r\n      score -= 20;\r\n    }\r\n\r\n    // 优先上午时间\r\n    const timeSlot = this.timeSlots.find(ts => ts.id === slot.timeSlotId);\r\n    if (timeSlot && timeSlot.order <= 4) {\r\n      score += 10;\r\n    }\r\n\r\n    // 避免周五下午\r\n    if (slot.dayOfWeek === 5 && timeSlot && timeSlot.order > 4) {\r\n      score -= 15;\r\n    }\r\n\r\n    // 检查班级当天已有课程数量\r\n    const dailyClasses = this.schedule.filter(\r\n      s => s.classId === classItem.id && s.dayOfWeek === slot.dayOfWeek\r\n    ).length;\r\n    \r\n    if (dailyClasses >= this.constraints.maxDailyHours) {\r\n      score -= 50;\r\n    }\r\n\r\n    return score;\r\n  }\r\n\r\n  // 分配教室\r\n  private assignClassroom(course: Course, dayOfWeek: number, timeSlotId: string): Classroom | null {\r\n    // 如果课程指定了教室\r\n    if (course.classroomId) {\r\n      const classroom = this.classrooms.find(c => c.id === course.classroomId);\r\n      if (classroom && !this.hasClassroomConflict(classroom.id, dayOfWeek, timeSlotId)) {\r\n        return classroom;\r\n      }\r\n    }\r\n\r\n    // 根据要求筛选教室\r\n    let availableClassrooms = this.classrooms.filter(classroom => {\r\n      // 检查容量\r\n      if (classroom.capacity < course.studentCount) return false;\r\n\r\n      // 检查类型要求\r\n      if (course.requirements.classroomType && \r\n          classroom.type !== course.requirements.classroomType) return false;\r\n\r\n      // 检查设备要求\r\n      if (course.requirements.equipment) {\r\n        const hasAllEquipment = course.requirements.equipment.every(\r\n          equipment => classroom.equipment.includes(equipment)\r\n        );\r\n        if (!hasAllEquipment) return false;\r\n      }\r\n\r\n      // 检查时间冲突\r\n      if (this.hasClassroomConflict(classroom.id, dayOfWeek, timeSlotId)) return false;\r\n\r\n      return true;\r\n    });\r\n\r\n    // 按容量排序，优先选择容量适中的教室\r\n    availableClassrooms.sort((a, b) => {\r\n      const aWaste = a.capacity - course.studentCount;\r\n      const bWaste = b.capacity - course.studentCount;\r\n      return aWaste - bWaste;\r\n    });\r\n\r\n    return availableClassrooms[0] || null;\r\n  }\r\n\r\n  // 检查教师冲突\r\n  private hasTeacherConflict(teacherId: string, dayOfWeek: number, timeSlotId: string): boolean {\r\n    return this.schedule.some(\r\n      item => item.teacherId === teacherId && \r\n               item.dayOfWeek === dayOfWeek && \r\n               item.timeSlotId === timeSlotId\r\n    );\r\n  }\r\n\r\n  // 检查班级冲突\r\n  private hasClassConflict(classId: string, dayOfWeek: number, timeSlotId: string): boolean {\r\n    return this.schedule.some(\r\n      item => item.classId === classId && \r\n               item.dayOfWeek === dayOfWeek && \r\n               item.timeSlotId === timeSlotId\r\n    );\r\n  }\r\n\r\n  // 检查教室冲突\r\n  private hasClassroomConflict(classroomId: string, dayOfWeek: number, timeSlotId: string): boolean {\r\n    return this.schedule.some(\r\n      item => item.classroomId === classroomId && \r\n               item.dayOfWeek === dayOfWeek && \r\n               item.timeSlotId === timeSlotId\r\n    );\r\n  }\r\n\r\n  // 检查是否可以安排连续时间段\r\n  private canScheduleConsecutiveSlots(\r\n    course: Course, \r\n    dayOfWeek: number, \r\n    startTimeSlotId: string,\r\n    classId: string,\r\n    teacherId: string\r\n  ): boolean {\r\n    const startSlot = this.timeSlots.find(ts => ts.id === startTimeSlotId);\r\n    if (!startSlot) return false;\r\n\r\n    const startIndex = this.timeSlots.indexOf(startSlot);\r\n    \r\n    // 检查是否有足够的连续时间段\r\n    for (let i = 0; i < course.duration; i++) {\r\n      const slotIndex = startIndex + i;\r\n      if (slotIndex >= this.timeSlots.length) return false;\r\n\r\n      const timeSlot = this.timeSlots[slotIndex];\r\n      \r\n      // 检查教师和班级冲突\r\n      if (this.hasTeacherConflict(teacherId, dayOfWeek, timeSlot.id) ||\r\n          this.hasClassConflict(classId, dayOfWeek, timeSlot.id)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // 检测冲突\r\n  private detectConflicts(): Conflict[] {\r\n    const conflicts: Conflict[] = [];\r\n\r\n    // 检查教师冲突\r\n    const teacherConflicts = this.detectTeacherConflicts();\r\n    conflicts.push(...teacherConflicts);\r\n\r\n    // 检查教室冲突\r\n    const classroomConflicts = this.detectClassroomConflicts();\r\n    conflicts.push(...classroomConflicts);\r\n\r\n    // 检查班级冲突\r\n    const classConflicts = this.detectClassConflicts();\r\n    conflicts.push(...classConflicts);\r\n\r\n    return conflicts;\r\n  }\r\n\r\n  private detectTeacherConflicts(): Conflict[] {\r\n    const conflicts: Conflict[] = [];\r\n    const teacherSchedule = new Map<string, ScheduleItem[]>();\r\n\r\n    // 按教师分组\r\n    this.schedule.forEach(item => {\r\n      if (!teacherSchedule.has(item.teacherId)) {\r\n        teacherSchedule.set(item.teacherId, []);\r\n      }\r\n      teacherSchedule.get(item.teacherId)!.push(item);\r\n    });\r\n\r\n    // 检查每个教师的时间冲突\r\n    teacherSchedule.forEach((items, teacherId) => {\r\n      const timeMap = new Map<string, ScheduleItem[]>();\r\n      \r\n      items.forEach(item => {\r\n        const key = `${item.dayOfWeek}-${item.timeSlotId}`;\r\n        if (!timeMap.has(key)) {\r\n          timeMap.set(key, []);\r\n        }\r\n        timeMap.get(key)!.push(item);\r\n      });\r\n\r\n      timeMap.forEach(conflictItems => {\r\n        if (conflictItems.length > 1) {\r\n          const teacher = this.teachers.find(t => t.id === teacherId);\r\n          conflicts.push({\r\n            type: 'teacher',\r\n            message: `教师 ${teacher?.name || teacherId} 在同一时间段有多个课程安排`,\r\n            items: conflictItems\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    return conflicts;\r\n  }\r\n\r\n  private detectClassroomConflicts(): Conflict[] {\r\n    const conflicts: Conflict[] = [];\r\n    const classroomSchedule = new Map<string, ScheduleItem[]>();\r\n\r\n    // 按教室分组\r\n    this.schedule.forEach(item => {\r\n      if (!classroomSchedule.has(item.classroomId)) {\r\n        classroomSchedule.set(item.classroomId, []);\r\n      }\r\n      classroomSchedule.get(item.classroomId)!.push(item);\r\n    });\r\n\r\n    // 检查每个教室的时间冲突\r\n    classroomSchedule.forEach((items, classroomId) => {\r\n      const timeMap = new Map<string, ScheduleItem[]>();\r\n      \r\n      items.forEach(item => {\r\n        const key = `${item.dayOfWeek}-${item.timeSlotId}`;\r\n        if (!timeMap.has(key)) {\r\n          timeMap.set(key, []);\r\n        }\r\n        timeMap.get(key)!.push(item);\r\n      });\r\n\r\n      timeMap.forEach(conflictItems => {\r\n        if (conflictItems.length > 1) {\r\n          const classroom = this.classrooms.find(c => c.id === classroomId);\r\n          conflicts.push({\r\n            type: 'classroom',\r\n            message: `教室 ${classroom?.name || classroomId} 在同一时间段被多个课程占用`,\r\n            items: conflictItems\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    return conflicts;\r\n  }\r\n\r\n  private detectClassConflicts(): Conflict[] {\r\n    const conflicts: Conflict[] = [];\r\n    const classSchedule = new Map<string, ScheduleItem[]>();\r\n\r\n    // 按班级分组\r\n    this.schedule.forEach(item => {\r\n      if (!classSchedule.has(item.classId)) {\r\n        classSchedule.set(item.classId, []);\r\n      }\r\n      classSchedule.get(item.classId)!.push(item);\r\n    });\r\n\r\n    // 检查每个班级的时间冲突\r\n    classSchedule.forEach((items, classId) => {\r\n      const timeMap = new Map<string, ScheduleItem[]>();\r\n      \r\n      items.forEach(item => {\r\n        const key = `${item.dayOfWeek}-${item.timeSlotId}`;\r\n        if (!timeMap.has(key)) {\r\n          timeMap.set(key, []);\r\n        }\r\n        timeMap.get(key)!.push(item);\r\n      });\r\n\r\n      timeMap.forEach(conflictItems => {\r\n        if (conflictItems.length > 1) {\r\n          const classItem = this.classes.find(c => c.id === classId);\r\n          conflicts.push({\r\n            type: 'class',\r\n            message: `班级 ${classItem?.name || classId} 在同一时间段有多个课程安排`,\r\n            items: conflictItems\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    return conflicts;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}