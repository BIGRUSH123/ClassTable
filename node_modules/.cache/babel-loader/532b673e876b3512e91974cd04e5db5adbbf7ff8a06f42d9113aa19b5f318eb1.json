{"ast":null,"code":"/**\r\n * 解析课程时间文本，支持复杂的时间格式\r\n * 例如：1-6周，星期一第5-6节 星期三第5-6节 (立人楼B411)\r\n *      7-8周，星期一第5-6节 星期三第5-6节 (立人楼B411)\r\n */\n\n// 星期映射\nconst DAY_MAP = {\n  '星期一': 1,\n  '星期二': 2,\n  '星期三': 3,\n  '星期四': 4,\n  '星期五': 5,\n  '星期六': 6,\n  '星期日': 7,\n  '周一': 1,\n  '周二': 2,\n  '周三': 3,\n  '周四': 4,\n  '周五': 5,\n  '周六': 6,\n  '周日': 7,\n  '一': 1,\n  '二': 2,\n  '三': 3,\n  '四': 4,\n  '五': 5,\n  '六': 6,\n  '日': 7\n};\n\n/**\r\n * 解析周次范围字符串\r\n * @param weekStr - 如 \"1-6周\" 或 \"7-8周\"\r\n * @returns WeekRange 对象\r\n */\nexport function parseWeekRange(weekStr) {\n  // 匹配 \"数字-数字周\" 或 \"数字周\" 格式\n  const match = weekStr.match(/(\\d+)(?:-(\\d+))?周?/);\n  if (!match) return null;\n  const start = parseInt(match[1]);\n  const end = match[2] ? parseInt(match[2]) : start;\n  return {\n    start,\n    end\n  };\n}\n\n/**\r\n * 解析节次范围\r\n * @param timeStr - 如 \"第5-6节\" 或 \"第5节\"\r\n * @returns 时间段ID数组\r\n */\nexport function parseTimeSlots(timeStr) {\n  // 匹配 \"第数字-数字节\" 或 \"第数字节\" 格式\n  const match = timeStr.match(/第(\\d+)(?:-(\\d+))?节/);\n  if (!match) return [];\n  const start = parseInt(match[1]);\n  const end = match[2] ? parseInt(match[2]) : start;\n  const slots = [];\n  for (let i = start; i <= end; i++) {\n    slots.push(i.toString());\n  }\n  return slots;\n}\n\n/**\r\n * 解析地点信息\r\n * @param text - 包含地点的文本，如 \"(立人楼B411)\"\r\n * @returns 地点字符串\r\n */\nexport function parseLocation(text) {\n  const match = text.match(/\\(([^)]+)\\)/);\n  return match ? match[1] : undefined;\n}\n\n/**\r\n * 解析星期\r\n * @param dayStr - 如 \"星期一\" 或 \"周一\"\r\n * @returns 星期数字 (1-7)\r\n */\nexport function parseDay(dayStr) {\n  return DAY_MAP[dayStr] || null;\n}\n\n/**\r\n * 解析单行时间安排\r\n * @param line - 如 \"1-6周，星期一第5-6节 星期三第5-6节 (立人楼B411)\"\r\n * @returns 解析结果\r\n */\nexport function parseTimeLine(line) {\n  const trimmedLine = line.trim();\n\n  // 提取周次信息\n  const weekMatch = trimmedLine.match(/^(\\d+(?:-\\d+)?周?)[，,]/);\n  const weeks = weekMatch ? parseWeekRange(weekMatch[1]) : null;\n\n  // 提取地点信息\n  const location = parseLocation(trimmedLine);\n\n  // 移除周次和地点信息，只保留时间安排\n  let timeContent = trimmedLine;\n  if (weekMatch) {\n    timeContent = timeContent.replace(weekMatch[0], '');\n  }\n  if (location) {\n    timeContent = timeContent.replace(/\\([^)]+\\)/, '');\n  }\n  timeContent = timeContent.trim();\n\n  // 解析时间安排：星期X第Y-Z节\n  const timeSlots = [];\n\n  // 匹配所有 \"星期X第Y-Z节\" 的模式 - 使用兼容的方法\n  const regex = /(星期[一二三四五六日]|周[一二三四五六日])\\s*第\\d+(?:-\\d+)?节/g;\n  let match;\n  while ((match = regex.exec(timeContent)) !== null) {\n    const fullMatch = match[0];\n\n    // 提取星期\n    const dayMatch = fullMatch.match(/(星期[一二三四五六日]|周[一二三四五六日])/);\n    if (!dayMatch) continue;\n    const dayOfWeek = parseDay(dayMatch[1]);\n    if (!dayOfWeek) continue;\n\n    // 提取节次\n    const timeSlotIds = parseTimeSlots(fullMatch);\n    if (timeSlotIds.length === 0) continue;\n    timeSlots.push({\n      dayOfWeek,\n      timeSlotIds,\n      weeks: weeks ? [weeks] : undefined,\n      location\n    });\n  }\n  return {\n    weeks,\n    timeSlots,\n    location\n  };\n}\n\n/**\r\n * 解析完整的课程时间文本\r\n * @param timeText - 完整的时间文本\r\n * @returns FixedTimeSlot数组\r\n */\nexport function parseCourseTime(timeText) {\n  if (!timeText || timeText.trim() === '') return [];\n  const allTimeSlots = [];\n\n  // 按行分割\n  const lines = timeText.split(/\\n|\\r\\n/).filter(line => line.trim() !== '');\n  for (const line of lines) {\n    const result = parseTimeLine(line);\n    allTimeSlots.push(...result.timeSlots);\n  }\n  return allTimeSlots;\n}\n\n/**\r\n * 从课程描述文本中提取课程信息\r\n * @param courseText - 完整的课程描述文本\r\n * @returns 解析的课程信息\r\n */\nexport function parseCourseInfo(courseText) {\n  // 首先按行分割，然后处理每行\n  const allLines = courseText.split(/\\r?\\n/).map(line => line.trim()).filter(line => line !== '');\n  if (allLines.length === 0) {\n    throw new Error('课程信息为空');\n  }\n\n  // 第一行包含主要信息，按制表符分割\n  const firstLineFields = allLines[0].split('\\t').map(field => field.trim());\n  if (firstLineFields.length < 4) {\n    throw new Error('课程信息格式不正确，至少需要包含：课程名、学分/教师、学院等信息');\n  }\n  let name;\n  let teachers;\n  let department;\n  let campus;\n  let credits;\n  let timeTextLines = [];\n\n  // 尝试两种常见的数据格式\n  if (firstLineFields.length >= 6) {\n    // 格式1: 课程名\t学分\t考试方式\t学院\t教师\t校区\t时间安排...\n    // 或格式2: 课程名\t教师\t学院\t校区\t学时\t学分\t时间安排...\n\n    // 检测哪种格式：如果第二个字段是纯数字，可能是学分在前\n    const secondFieldIsNumber = /^\\d+$/.test(firstLineFields[1]);\n    if (secondFieldIsNumber && firstLineFields.length >= 6) {\n      // 格式1: 课程名\t学分\t考试方式\t学院\t教师\t校区\t时间安排...\n      name = firstLineFields[0];\n      credits = parseInt(firstLineFields[1]) || undefined;\n      // 跳过考试方式字段 (firstLineFields[2])\n      department = firstLineFields[3];\n      teachers = firstLineFields[4].split(/[,，]/).map(t => t.trim()).filter(t => t !== '');\n      campus = firstLineFields[5];\n      // 时间信息从第7个字段开始（索引6）\n      if (firstLineFields.length > 6) {\n        timeTextLines.push(firstLineFields.slice(6).join('\\t'));\n      }\n    } else {\n      // 格式2: 课程名\t教师\t学院\t校区\t学时\t学分\t时间安排...\n      name = firstLineFields[0];\n      teachers = firstLineFields[1].split(/[,，]/).map(t => t.trim()).filter(t => t !== '');\n      department = firstLineFields[2];\n      campus = firstLineFields[3];\n      // 学时通常在第5列，学分在第6列\n      if (firstLineFields.length > 5) {\n        const creditsMatch = firstLineFields[5].match(/\\d+/);\n        if (creditsMatch) {\n          credits = parseInt(creditsMatch[0]);\n        }\n      }\n      // 时间信息从第7个字段开始（索引6）\n      if (firstLineFields.length > 6) {\n        timeTextLines.push(firstLineFields.slice(6).join('\\t'));\n      }\n    }\n  } else {\n    // 简单格式处理\n    name = firstLineFields[0];\n    teachers = firstLineFields[1] ? firstLineFields[1].split(/[,，]/).map(t => t.trim()).filter(t => t !== '') : ['未知教师'];\n    department = firstLineFields[2] || '未知学院';\n    campus = firstLineFields[3] || '未知校区';\n    credits = undefined;\n  }\n\n  // 收集所有后续行作为时间信息（这些行可能不包含制表符，只是续行的时间数据）\n  for (let i = 1; i < allLines.length; i++) {\n    const line = allLines[i];\n    // 如果这一行包含制表符，可能是新的课程记录，跳过\n    if (line.includes('\\t')) {\n      // 检查是否是时间信息的一部分（包含周次、星期等关键词）\n      if (/\\d+[-–]?\\d*周|星期[一二三四五六日]|第\\d+/.test(line)) {\n        timeTextLines.push(line);\n      }\n      break; // 遇到新的制表符分隔行，停止\n    } else {\n      // 没有制表符的行，很可能是时间信息的续行\n      timeTextLines.push(line);\n    }\n  }\n\n  // 解析时间信息\n  const timeText = timeTextLines.join('\\n');\n  const timeSlots = parseCourseTime(timeText);\n  return {\n    name,\n    teachers,\n    department,\n    campus,\n    credits,\n    timeSlots\n  };\n}\n\n/**\r\n * 检查指定周次是否在周次范围内\r\n * @param week - 要检查的周次\r\n * @param ranges - 周次范围数组\r\n * @returns 是否在范围内\r\n */\nexport function isWeekInRanges(week, ranges) {\n  if (!ranges || ranges.length === 0) return true;\n  return ranges.some(range => week >= range.start && week <= range.end);\n}\n\n/**\r\n * 格式化周次范围为字符串\r\n * @param ranges - 周次范围数组\r\n * @returns 格式化的字符串\r\n */\nexport function formatWeekRanges(ranges) {\n  if (!ranges || ranges.length === 0) return '全学期';\n  return ranges.map(range => {\n    if (range.start === range.end) {\n      return `${range.start}周`;\n    } else {\n      return `${range.start}-${range.end}周`;\n    }\n  }).join('，');\n}","map":{"version":3,"names":["DAY_MAP","parseWeekRange","weekStr","match","start","parseInt","end","parseTimeSlots","timeStr","slots","i","push","toString","parseLocation","text","undefined","parseDay","dayStr","parseTimeLine","line","trimmedLine","trim","weekMatch","weeks","location","timeContent","replace","timeSlots","regex","exec","fullMatch","dayMatch","dayOfWeek","timeSlotIds","length","parseCourseTime","timeText","allTimeSlots","lines","split","filter","result","parseCourseInfo","courseText","allLines","map","Error","firstLineFields","field","name","teachers","department","campus","credits","timeTextLines","secondFieldIsNumber","test","t","slice","join","creditsMatch","includes","isWeekInRanges","week","ranges","some","range","formatWeekRanges"],"sources":["D:/code/classtable/src/utils/courseTimeParser.ts"],"sourcesContent":["import { FixedTimeSlot, WeekRange } from '../types';\r\n\r\n/**\r\n * 解析课程时间文本，支持复杂的时间格式\r\n * 例如：1-6周，星期一第5-6节 星期三第5-6节 (立人楼B411)\r\n *      7-8周，星期一第5-6节 星期三第5-6节 (立人楼B411)\r\n */\r\n\r\n// 星期映射\r\nconst DAY_MAP: { [key: string]: number } = {\r\n  '星期一': 1, '星期二': 2, '星期三': 3, '星期四': 4, '星期五': 5, '星期六': 6, '星期日': 7,\r\n  '周一': 1, '周二': 2, '周三': 3, '周四': 4, '周五': 5, '周六': 6, '周日': 7,\r\n  '一': 1, '二': 2, '三': 3, '四': 4, '五': 5, '六': 6, '日': 7\r\n};\r\n\r\n/**\r\n * 解析周次范围字符串\r\n * @param weekStr - 如 \"1-6周\" 或 \"7-8周\"\r\n * @returns WeekRange 对象\r\n */\r\nexport function parseWeekRange(weekStr: string): WeekRange | null {\r\n  // 匹配 \"数字-数字周\" 或 \"数字周\" 格式\r\n  const match = weekStr.match(/(\\d+)(?:-(\\d+))?周?/);\r\n  if (!match) return null;\r\n  \r\n  const start = parseInt(match[1]);\r\n  const end = match[2] ? parseInt(match[2]) : start;\r\n  \r\n  return { start, end };\r\n}\r\n\r\n/**\r\n * 解析节次范围\r\n * @param timeStr - 如 \"第5-6节\" 或 \"第5节\"\r\n * @returns 时间段ID数组\r\n */\r\nexport function parseTimeSlots(timeStr: string): string[] {\r\n  // 匹配 \"第数字-数字节\" 或 \"第数字节\" 格式\r\n  const match = timeStr.match(/第(\\d+)(?:-(\\d+))?节/);\r\n  if (!match) return [];\r\n  \r\n  const start = parseInt(match[1]);\r\n  const end = match[2] ? parseInt(match[2]) : start;\r\n  \r\n  const slots: string[] = [];\r\n  for (let i = start; i <= end; i++) {\r\n    slots.push(i.toString());\r\n  }\r\n  \r\n  return slots;\r\n}\r\n\r\n/**\r\n * 解析地点信息\r\n * @param text - 包含地点的文本，如 \"(立人楼B411)\"\r\n * @returns 地点字符串\r\n */\r\nexport function parseLocation(text: string): string | undefined {\r\n  const match = text.match(/\\(([^)]+)\\)/);\r\n  return match ? match[1] : undefined;\r\n}\r\n\r\n/**\r\n * 解析星期\r\n * @param dayStr - 如 \"星期一\" 或 \"周一\"\r\n * @returns 星期数字 (1-7)\r\n */\r\nexport function parseDay(dayStr: string): number | null {\r\n  return DAY_MAP[dayStr] || null;\r\n}\r\n\r\n/**\r\n * 解析单行时间安排\r\n * @param line - 如 \"1-6周，星期一第5-6节 星期三第5-6节 (立人楼B411)\"\r\n * @returns 解析结果\r\n */\r\nexport function parseTimeLine(line: string): {\r\n  weeks: WeekRange | null;\r\n  timeSlots: FixedTimeSlot[];\r\n  location?: string;\r\n} {\r\n  const trimmedLine = line.trim();\r\n  \r\n  // 提取周次信息\r\n  const weekMatch = trimmedLine.match(/^(\\d+(?:-\\d+)?周?)[，,]/);\r\n  const weeks = weekMatch ? parseWeekRange(weekMatch[1]) : null;\r\n  \r\n  // 提取地点信息\r\n  const location = parseLocation(trimmedLine);\r\n  \r\n  // 移除周次和地点信息，只保留时间安排\r\n  let timeContent = trimmedLine;\r\n  if (weekMatch) {\r\n    timeContent = timeContent.replace(weekMatch[0], '');\r\n  }\r\n  if (location) {\r\n    timeContent = timeContent.replace(/\\([^)]+\\)/, '');\r\n  }\r\n  timeContent = timeContent.trim();\r\n  \r\n  // 解析时间安排：星期X第Y-Z节\r\n  const timeSlots: FixedTimeSlot[] = [];\r\n  \r\n  // 匹配所有 \"星期X第Y-Z节\" 的模式 - 使用兼容的方法\r\n  const regex = /(星期[一二三四五六日]|周[一二三四五六日])\\s*第\\d+(?:-\\d+)?节/g;\r\n  let match;\r\n  \r\n  while ((match = regex.exec(timeContent)) !== null) {\r\n    const fullMatch = match[0];\r\n    \r\n    // 提取星期\r\n    const dayMatch = fullMatch.match(/(星期[一二三四五六日]|周[一二三四五六日])/);\r\n    if (!dayMatch) continue;\r\n    \r\n    const dayOfWeek = parseDay(dayMatch[1]);\r\n    if (!dayOfWeek) continue;\r\n    \r\n    // 提取节次\r\n    const timeSlotIds = parseTimeSlots(fullMatch);\r\n    if (timeSlotIds.length === 0) continue;\r\n    \r\n    timeSlots.push({\r\n      dayOfWeek,\r\n      timeSlotIds,\r\n      weeks: weeks ? [weeks] : undefined,\r\n      location\r\n    });\r\n  }\r\n  \r\n  return {\r\n    weeks,\r\n    timeSlots,\r\n    location\r\n  };\r\n}\r\n\r\n/**\r\n * 解析完整的课程时间文本\r\n * @param timeText - 完整的时间文本\r\n * @returns FixedTimeSlot数组\r\n */\r\nexport function parseCourseTime(timeText: string): FixedTimeSlot[] {\r\n  if (!timeText || timeText.trim() === '') return [];\r\n  \r\n  const allTimeSlots: FixedTimeSlot[] = [];\r\n  \r\n  // 按行分割\r\n  const lines = timeText.split(/\\n|\\r\\n/).filter(line => line.trim() !== '');\r\n  \r\n  for (const line of lines) {\r\n    const result = parseTimeLine(line);\r\n    allTimeSlots.push(...result.timeSlots);\r\n  }\r\n  \r\n  return allTimeSlots;\r\n}\r\n\r\n/**\r\n * 从课程描述文本中提取课程信息\r\n * @param courseText - 完整的课程描述文本\r\n * @returns 解析的课程信息\r\n */\r\nexport function parseCourseInfo(courseText: string): {\r\n  name: string;\r\n  teachers: string[];\r\n  department?: string;\r\n  campus?: string;\r\n  credits?: number;\r\n  timeSlots: FixedTimeSlot[];\r\n} {\r\n  // 首先按行分割，然后处理每行\r\n  const allLines = courseText.split(/\\r?\\n/).map(line => line.trim()).filter(line => line !== '');\r\n  \r\n  if (allLines.length === 0) {\r\n    throw new Error('课程信息为空');\r\n  }\r\n  \r\n  // 第一行包含主要信息，按制表符分割\r\n  const firstLineFields = allLines[0].split('\\t').map(field => field.trim());\r\n  \r\n  if (firstLineFields.length < 4) {\r\n    throw new Error('课程信息格式不正确，至少需要包含：课程名、学分/教师、学院等信息');\r\n  }\r\n  \r\n  let name: string;\r\n  let teachers: string[];\r\n  let department: string;\r\n  let campus: string;\r\n  let credits: number | undefined;\r\n  let timeTextLines: string[] = [];\r\n  \r\n  // 尝试两种常见的数据格式\r\n  if (firstLineFields.length >= 6) {\r\n    // 格式1: 课程名\t学分\t考试方式\t学院\t教师\t校区\t时间安排...\r\n    // 或格式2: 课程名\t教师\t学院\t校区\t学时\t学分\t时间安排...\r\n    \r\n    // 检测哪种格式：如果第二个字段是纯数字，可能是学分在前\r\n    const secondFieldIsNumber = /^\\d+$/.test(firstLineFields[1]);\r\n    \r\n    if (secondFieldIsNumber && firstLineFields.length >= 6) {\r\n      // 格式1: 课程名\t学分\t考试方式\t学院\t教师\t校区\t时间安排...\r\n      name = firstLineFields[0];\r\n      credits = parseInt(firstLineFields[1]) || undefined;\r\n      // 跳过考试方式字段 (firstLineFields[2])\r\n      department = firstLineFields[3];\r\n      teachers = firstLineFields[4].split(/[,，]/).map(t => t.trim()).filter(t => t !== '');\r\n      campus = firstLineFields[5];\r\n      // 时间信息从第7个字段开始（索引6）\r\n      if (firstLineFields.length > 6) {\r\n        timeTextLines.push(firstLineFields.slice(6).join('\\t'));\r\n      }\r\n    } else {\r\n      // 格式2: 课程名\t教师\t学院\t校区\t学时\t学分\t时间安排...\r\n      name = firstLineFields[0];\r\n      teachers = firstLineFields[1].split(/[,，]/).map(t => t.trim()).filter(t => t !== '');\r\n      department = firstLineFields[2];\r\n      campus = firstLineFields[3];\r\n      // 学时通常在第5列，学分在第6列\r\n      if (firstLineFields.length > 5) {\r\n        const creditsMatch = firstLineFields[5].match(/\\d+/);\r\n        if (creditsMatch) {\r\n          credits = parseInt(creditsMatch[0]);\r\n        }\r\n      }\r\n      // 时间信息从第7个字段开始（索引6）\r\n      if (firstLineFields.length > 6) {\r\n        timeTextLines.push(firstLineFields.slice(6).join('\\t'));\r\n      }\r\n    }\r\n  } else {\r\n    // 简单格式处理\r\n    name = firstLineFields[0];\r\n    teachers = firstLineFields[1] ? firstLineFields[1].split(/[,，]/).map(t => t.trim()).filter(t => t !== '') : ['未知教师'];\r\n    department = firstLineFields[2] || '未知学院';\r\n    campus = firstLineFields[3] || '未知校区';\r\n    credits = undefined;\r\n  }\r\n  \r\n  // 收集所有后续行作为时间信息（这些行可能不包含制表符，只是续行的时间数据）\r\n  for (let i = 1; i < allLines.length; i++) {\r\n    const line = allLines[i];\r\n    // 如果这一行包含制表符，可能是新的课程记录，跳过\r\n    if (line.includes('\\t')) {\r\n      // 检查是否是时间信息的一部分（包含周次、星期等关键词）\r\n      if (/\\d+[-–]?\\d*周|星期[一二三四五六日]|第\\d+/.test(line)) {\r\n        timeTextLines.push(line);\r\n      }\r\n      break; // 遇到新的制表符分隔行，停止\r\n    } else {\r\n      // 没有制表符的行，很可能是时间信息的续行\r\n      timeTextLines.push(line);\r\n    }\r\n  }\r\n  \r\n  // 解析时间信息\r\n  const timeText = timeTextLines.join('\\n');\r\n  const timeSlots = parseCourseTime(timeText);\r\n  \r\n  return {\r\n    name,\r\n    teachers,\r\n    department,\r\n    campus,\r\n    credits,\r\n    timeSlots\r\n  };\r\n}\r\n\r\n/**\r\n * 检查指定周次是否在周次范围内\r\n * @param week - 要检查的周次\r\n * @param ranges - 周次范围数组\r\n * @returns 是否在范围内\r\n */\r\nexport function isWeekInRanges(week: number, ranges?: WeekRange[]): boolean {\r\n  if (!ranges || ranges.length === 0) return true;\r\n  \r\n  return ranges.some(range => week >= range.start && week <= range.end);\r\n}\r\n\r\n/**\r\n * 格式化周次范围为字符串\r\n * @param ranges - 周次范围数组\r\n * @returns 格式化的字符串\r\n */\r\nexport function formatWeekRanges(ranges?: WeekRange[]): string {\r\n  if (!ranges || ranges.length === 0) return '全学期';\r\n  \r\n  return ranges.map(range => {\r\n    if (range.start === range.end) {\r\n      return `${range.start}周`;\r\n    } else {\r\n      return `${range.start}-${range.end}周`;\r\n    }\r\n  }).join('，');\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}