{"ast":null,"code":"export class SchedulingAlgorithm {\n  constructor(courses, teachers, timeSlots) {\n    this.courses = void 0;\n    this.teachers = void 0;\n    this.timeSlots = void 0;\n    this.schedule = void 0;\n    this.courses = courses;\n    this.teachers = teachers;\n    this.timeSlots = timeSlots.sort((a, b) => a.order - b.order);\n    this.schedule = [];\n  }\n\n  // 主排课方法\n  generateSchedule() {\n    this.schedule = [];\n    const conflicts = [];\n    try {\n      // 根据每个课程的固定时间段生成课表\n      for (const course of this.courses) {\n        this.scheduleForCourse(course);\n      }\n\n      // 检查冲突\n      const detectedConflicts = this.detectConflicts();\n      conflicts.push(...detectedConflicts);\n      return {\n        schedule: this.schedule,\n        conflicts,\n        success: conflicts.length === 0,\n        message: conflicts.length === 0 ? '课表生成成功！' : `课表生成完成，但存在 ${conflicts.length} 个时间冲突`\n      };\n    } catch (error) {\n      return {\n        schedule: [],\n        conflicts,\n        success: false,\n        message: `生成失败: ${error instanceof Error ? error.message : '未知错误'}`\n      };\n    }\n  }\n\n  // 为单个课程排课\n  scheduleForCourse(course) {\n    // 检查课程是否有固定时间段\n    if (!course.fixedTimeSlots || !Array.isArray(course.fixedTimeSlots)) {\n      console.warn(`课程 ${course.name} 没有有效的固定时间段`);\n      return;\n    }\n\n    // 根据课程的固定时间段生成课表条目\n    for (const fixedSlot of course.fixedTimeSlots) {\n      if (!fixedSlot.timeSlotIds || !Array.isArray(fixedSlot.timeSlotIds)) {\n        console.warn(`课程 ${course.name} 的时间段配置无效`);\n        continue;\n      }\n      for (const timeSlotId of fixedSlot.timeSlotIds) {\n        const scheduleItem = {\n          id: `${course.id}-${fixedSlot.dayOfWeek}-${timeSlotId}`,\n          courseId: course.id,\n          teacherId: course.teacherId,\n          timeSlotId: timeSlotId,\n          dayOfWeek: fixedSlot.dayOfWeek,\n          location: course.location\n        };\n        this.schedule.push(scheduleItem);\n      }\n    }\n  }\n\n  // 检测冲突\n  detectConflicts() {\n    const conflicts = [];\n\n    // 检查时间冲突 - 同一时间段有多个课程\n    const timeConflicts = this.detectTimeConflicts();\n    conflicts.push(...timeConflicts);\n    return conflicts;\n  }\n\n  // 检测时间冲突\n  detectTimeConflicts() {\n    const conflicts = [];\n    const timeMap = new Map();\n\n    // 按时间段分组\n    this.schedule.forEach(item => {\n      const key = `${item.dayOfWeek}-${item.timeSlotId}`;\n      if (!timeMap.has(key)) {\n        timeMap.set(key, []);\n      }\n      timeMap.get(key).push(item);\n    });\n\n    // 检查每个时间段是否有冲突\n    timeMap.forEach((items, timeKey) => {\n      if (items.length > 1) {\n        const [dayOfWeek, timeSlotId] = timeKey.split('-');\n        const timeSlot = this.timeSlots.find(ts => ts.id === timeSlotId);\n        const dayName = ['', '周一', '周二', '周三', '周四', '周五', '周六', '周日'][parseInt(dayOfWeek)];\n        conflicts.push({\n          type: 'time',\n          message: `${dayName} ${(timeSlot === null || timeSlot === void 0 ? void 0 : timeSlot.name) || timeSlotId} 有多个课程安排`,\n          items: items\n        });\n      }\n    });\n    return conflicts;\n  }\n}","map":{"version":3,"names":["SchedulingAlgorithm","constructor","courses","teachers","timeSlots","schedule","sort","a","b","order","generateSchedule","conflicts","course","scheduleForCourse","detectedConflicts","detectConflicts","push","success","length","message","error","Error","fixedTimeSlots","Array","isArray","console","warn","name","fixedSlot","timeSlotIds","timeSlotId","scheduleItem","id","dayOfWeek","courseId","teacherId","location","timeConflicts","detectTimeConflicts","timeMap","Map","forEach","item","key","has","set","get","items","timeKey","split","timeSlot","find","ts","dayName","parseInt","type"],"sources":["D:/code/classtable/src/utils/schedulingAlgorithm.ts"],"sourcesContent":["import { \r\n  Course, \r\n  Teacher, \r\n  TimeSlot, \r\n  ScheduleItem, \r\n  Conflict \r\n} from '../types';\r\n\r\nexport interface SchedulingResult {\r\n  schedule: ScheduleItem[];\r\n  conflicts: Conflict[];\r\n  success: boolean;\r\n  message: string;\r\n}\r\n\r\nexport class SchedulingAlgorithm {\r\n  private courses: Course[];\r\n  private teachers: Teacher[];\r\n  private timeSlots: TimeSlot[];\r\n  private schedule: ScheduleItem[];\r\n\r\n  constructor(\r\n    courses: Course[],\r\n    teachers: Teacher[],\r\n    timeSlots: TimeSlot[]\r\n  ) {\r\n    this.courses = courses;\r\n    this.teachers = teachers;\r\n    this.timeSlots = timeSlots.sort((a, b) => a.order - b.order);\r\n    this.schedule = [];\r\n  }\r\n\r\n  // 主排课方法\r\n  public generateSchedule(): SchedulingResult {\r\n    this.schedule = [];\r\n    const conflicts: Conflict[] = [];\r\n\r\n    try {\r\n      // 根据每个课程的固定时间段生成课表\r\n      for (const course of this.courses) {\r\n        this.scheduleForCourse(course);\r\n      }\r\n\r\n      // 检查冲突\r\n      const detectedConflicts = this.detectConflicts();\r\n      conflicts.push(...detectedConflicts);\r\n\r\n      return {\r\n        schedule: this.schedule,\r\n        conflicts,\r\n        success: conflicts.length === 0,\r\n        message: conflicts.length === 0 \r\n          ? '课表生成成功！' \r\n          : `课表生成完成，但存在 ${conflicts.length} 个时间冲突`\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        schedule: [],\r\n        conflicts,\r\n        success: false,\r\n        message: `生成失败: ${error instanceof Error ? error.message : '未知错误'}`\r\n      };\r\n    }\r\n  }\r\n\r\n  // 为单个课程排课\r\n  private scheduleForCourse(course: Course): void {\r\n    // 检查课程是否有固定时间段\r\n    if (!course.fixedTimeSlots || !Array.isArray(course.fixedTimeSlots)) {\r\n      console.warn(`课程 ${course.name} 没有有效的固定时间段`);\r\n      return;\r\n    }\r\n\r\n    // 根据课程的固定时间段生成课表条目\r\n    for (const fixedSlot of course.fixedTimeSlots) {\r\n      if (!fixedSlot.timeSlotIds || !Array.isArray(fixedSlot.timeSlotIds)) {\r\n        console.warn(`课程 ${course.name} 的时间段配置无效`);\r\n        continue;\r\n      }\r\n\r\n      for (const timeSlotId of fixedSlot.timeSlotIds) {\r\n        const scheduleItem: ScheduleItem = {\r\n          id: `${course.id}-${fixedSlot.dayOfWeek}-${timeSlotId}`,\r\n          courseId: course.id,\r\n          teacherId: course.teacherId,\r\n          timeSlotId: timeSlotId,\r\n          dayOfWeek: fixedSlot.dayOfWeek,\r\n          location: course.location\r\n        };\r\n        \r\n        this.schedule.push(scheduleItem);\r\n      }\r\n    }\r\n  }\r\n\r\n  // 检测冲突\r\n  private detectConflicts(): Conflict[] {\r\n    const conflicts: Conflict[] = [];\r\n\r\n    // 检查时间冲突 - 同一时间段有多个课程\r\n    const timeConflicts = this.detectTimeConflicts();\r\n    conflicts.push(...timeConflicts);\r\n\r\n    return conflicts;\r\n  }\r\n\r\n  // 检测时间冲突\r\n  private detectTimeConflicts(): Conflict[] {\r\n    const conflicts: Conflict[] = [];\r\n    const timeMap = new Map<string, ScheduleItem[]>();\r\n\r\n    // 按时间段分组\r\n    this.schedule.forEach(item => {\r\n      const key = `${item.dayOfWeek}-${item.timeSlotId}`;\r\n      if (!timeMap.has(key)) {\r\n        timeMap.set(key, []);\r\n      }\r\n      timeMap.get(key)!.push(item);\r\n    });\r\n\r\n    // 检查每个时间段是否有冲突\r\n    timeMap.forEach((items, timeKey) => {\r\n      if (items.length > 1) {\r\n        const [dayOfWeek, timeSlotId] = timeKey.split('-');\r\n        const timeSlot = this.timeSlots.find(ts => ts.id === timeSlotId);\r\n        const dayName = ['', '周一', '周二', '周三', '周四', '周五', '周六', '周日'][parseInt(dayOfWeek)];\r\n        \r\n        conflicts.push({\r\n          type: 'time',\r\n          message: `${dayName} ${timeSlot?.name || timeSlotId} 有多个课程安排`,\r\n          items: items\r\n        });\r\n      }\r\n    });\r\n\r\n    return conflicts;\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}