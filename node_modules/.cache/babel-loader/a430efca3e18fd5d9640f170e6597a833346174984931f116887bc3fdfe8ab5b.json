{"ast":null,"code":"export class SchedulingAlgorithm {\n  constructor(courses, teachers, timeSlots) {\n    this.courses = void 0;\n    this.teachers = void 0;\n    this.timeSlots = void 0;\n    this.schedule = void 0;\n    this.courses = courses;\n    this.teachers = teachers;\n    this.timeSlots = timeSlots.sort((a, b) => a.order - b.order);\n    this.schedule = [];\n  }\n\n  // 主排课方法\n  generateSchedule() {\n    this.schedule = [];\n    const conflicts = [];\n    try {\n      // 为每个班级排课\n      for (const classItem of this.classes) {\n        this.scheduleForClass(classItem);\n      }\n\n      // 检查冲突\n      const detectedConflicts = this.detectConflicts();\n      conflicts.push(...detectedConflicts);\n      return {\n        schedule: this.schedule,\n        conflicts,\n        success: conflicts.length === 0,\n        message: conflicts.length === 0 ? '排课成功！' : `排课完成，但存在 ${conflicts.length} 个冲突需要解决`\n      };\n    } catch (error) {\n      return {\n        schedule: [],\n        conflicts,\n        success: false,\n        message: `排课失败: ${error instanceof Error ? error.message : '未知错误'}`\n      };\n    }\n  }\n\n  // 为单个班级排课\n  scheduleForClass(classItem) {\n    const classSchedule = [];\n    for (const courseId of classItem.courses) {\n      const course = this.courses.find(c => c.id === courseId);\n      if (!course) continue;\n\n      // 根据频次安排课程\n      for (let i = 0; i < course.frequency; i++) {\n        const scheduleItem = this.findBestSlot(course, classItem, i);\n        if (scheduleItem) {\n          classSchedule.push(scheduleItem);\n          // 立即将新安排的课程添加到总课表中，以便后续冲突检查\n          this.schedule.push(scheduleItem);\n        }\n      }\n    }\n    return classSchedule;\n  }\n\n  // 寻找最佳时间段\n  findBestSlot(course, classItem, sessionIndex) {\n    const teacher = this.teachers.find(t => t.id === course.teacherId);\n    if (!teacher) return null;\n\n    // 获取可用的时间段\n    const availableSlots = this.getAvailableTimeSlots(course, classItem, teacher);\n    if (availableSlots.length === 0) return null;\n\n    // 评分并选择最佳时间段\n    const scoredSlots = availableSlots.map(slot => ({\n      ...slot,\n      score: this.calculateSlotScore(slot, course, classItem, teacher)\n    }));\n    scoredSlots.sort((a, b) => b.score - a.score);\n    const bestSlot = scoredSlots[0];\n\n    // 分配教室\n    const classroom = this.assignClassroom(course, bestSlot.dayOfWeek, bestSlot.timeSlotId);\n    if (!classroom) return null;\n    return {\n      id: `${course.id}-${classItem.id}-${sessionIndex}`,\n      courseId: course.id,\n      classId: classItem.id,\n      teacherId: course.teacherId,\n      classroomId: classroom.id,\n      timeSlotId: bestSlot.timeSlotId,\n      dayOfWeek: bestSlot.dayOfWeek\n    };\n  }\n\n  // 获取可用时间段\n  getAvailableTimeSlots(course, classItem, teacher) {\n    const availableSlots = [];\n    for (let day = 1; day <= 5; day++) {\n      // 周一到周五\n      for (const timeSlot of this.timeSlots) {\n        // 检查教师是否可用\n        if (teacher.unavailableSlots.includes(timeSlot.id)) continue;\n\n        // 检查是否在禁止时间段\n        if (this.constraints.forbiddenSlots.some(fs => fs.dayOfWeek === day && fs.timeSlotId === timeSlot.id)) continue;\n\n        // 检查教师冲突\n        if (this.hasTeacherConflict(teacher.id, day, timeSlot.id)) continue;\n\n        // 检查班级冲突\n        if (this.hasClassConflict(classItem.id, day, timeSlot.id)) continue;\n\n        // 检查连续课程要求\n        if (course.duration > 1 && course.requirements.consecutiveSlots) {\n          if (this.canScheduleConsecutiveSlots(course, day, timeSlot.id, classItem.id, teacher.id)) {\n            availableSlots.push({\n              dayOfWeek: day,\n              timeSlotId: timeSlot.id\n            });\n          }\n        } else {\n          availableSlots.push({\n            dayOfWeek: day,\n            timeSlotId: timeSlot.id\n          });\n        }\n      }\n    }\n    return availableSlots;\n  }\n\n  // 计算时间段评分\n  calculateSlotScore(slot, course, classItem, teacher) {\n    let score = 100;\n\n    // 避免午休时间\n    if (this.constraints.lunchBreakSlots.includes(slot.timeSlotId)) {\n      score -= 20;\n    }\n\n    // 优先上午时间\n    const timeSlot = this.timeSlots.find(ts => ts.id === slot.timeSlotId);\n    if (timeSlot && timeSlot.order <= 4) {\n      score += 10;\n    }\n\n    // 避免周五下午\n    if (slot.dayOfWeek === 5 && timeSlot && timeSlot.order > 4) {\n      score -= 15;\n    }\n\n    // 检查班级当天已有课程数量\n    const dailyClasses = this.schedule.filter(s => s.classId === classItem.id && s.dayOfWeek === slot.dayOfWeek).length;\n    if (dailyClasses >= this.constraints.maxDailyHours) {\n      score -= 50;\n    }\n    return score;\n  }\n\n  // 分配教室\n  assignClassroom(course, dayOfWeek, timeSlotId) {\n    // 如果课程指定了教室\n    if (course.classroomId) {\n      const classroom = this.classrooms.find(c => c.id === course.classroomId);\n      if (classroom && !this.hasClassroomConflict(classroom.id, dayOfWeek, timeSlotId)) {\n        return classroom;\n      }\n    }\n\n    // 根据要求筛选教室\n    let availableClassrooms = this.classrooms.filter(classroom => {\n      // 检查容量\n      if (classroom.capacity < course.studentCount) return false;\n\n      // 检查类型要求\n      if (course.requirements.classroomType && classroom.type !== course.requirements.classroomType) return false;\n\n      // 检查设备要求\n      if (course.requirements.equipment) {\n        const hasAllEquipment = course.requirements.equipment.every(equipment => classroom.equipment.includes(equipment));\n        if (!hasAllEquipment) return false;\n      }\n\n      // 检查时间冲突\n      if (this.hasClassroomConflict(classroom.id, dayOfWeek, timeSlotId)) return false;\n      return true;\n    });\n\n    // 按容量排序，优先选择容量适中的教室\n    availableClassrooms.sort((a, b) => {\n      const aWaste = a.capacity - course.studentCount;\n      const bWaste = b.capacity - course.studentCount;\n      return aWaste - bWaste;\n    });\n    return availableClassrooms[0] || null;\n  }\n\n  // 检查教师冲突\n  hasTeacherConflict(teacherId, dayOfWeek, timeSlotId) {\n    return this.schedule.some(item => item.teacherId === teacherId && item.dayOfWeek === dayOfWeek && item.timeSlotId === timeSlotId);\n  }\n\n  // 检查班级冲突\n  hasClassConflict(classId, dayOfWeek, timeSlotId) {\n    return this.schedule.some(item => item.classId === classId && item.dayOfWeek === dayOfWeek && item.timeSlotId === timeSlotId);\n  }\n\n  // 检查教室冲突\n  hasClassroomConflict(classroomId, dayOfWeek, timeSlotId) {\n    return this.schedule.some(item => item.classroomId === classroomId && item.dayOfWeek === dayOfWeek && item.timeSlotId === timeSlotId);\n  }\n\n  // 检查是否可以安排连续时间段\n  canScheduleConsecutiveSlots(course, dayOfWeek, startTimeSlotId, classId, teacherId) {\n    const startSlot = this.timeSlots.find(ts => ts.id === startTimeSlotId);\n    if (!startSlot) return false;\n    const startIndex = this.timeSlots.indexOf(startSlot);\n\n    // 检查是否有足够的连续时间段\n    for (let i = 0; i < course.duration; i++) {\n      const slotIndex = startIndex + i;\n      if (slotIndex >= this.timeSlots.length) return false;\n      const timeSlot = this.timeSlots[slotIndex];\n\n      // 检查教师和班级冲突\n      if (this.hasTeacherConflict(teacherId, dayOfWeek, timeSlot.id) || this.hasClassConflict(classId, dayOfWeek, timeSlot.id)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // 检测冲突\n  detectConflicts() {\n    const conflicts = [];\n\n    // 检查教师冲突\n    const teacherConflicts = this.detectTeacherConflicts();\n    conflicts.push(...teacherConflicts);\n\n    // 检查教室冲突\n    const classroomConflicts = this.detectClassroomConflicts();\n    conflicts.push(...classroomConflicts);\n\n    // 检查班级冲突\n    const classConflicts = this.detectClassConflicts();\n    conflicts.push(...classConflicts);\n    return conflicts;\n  }\n  detectTeacherConflicts() {\n    const conflicts = [];\n    const teacherSchedule = new Map();\n\n    // 按教师分组\n    this.schedule.forEach(item => {\n      if (!teacherSchedule.has(item.teacherId)) {\n        teacherSchedule.set(item.teacherId, []);\n      }\n      teacherSchedule.get(item.teacherId).push(item);\n    });\n\n    // 检查每个教师的时间冲突\n    teacherSchedule.forEach((items, teacherId) => {\n      const timeMap = new Map();\n      items.forEach(item => {\n        const key = `${item.dayOfWeek}-${item.timeSlotId}`;\n        if (!timeMap.has(key)) {\n          timeMap.set(key, []);\n        }\n        timeMap.get(key).push(item);\n      });\n      timeMap.forEach(conflictItems => {\n        if (conflictItems.length > 1) {\n          const teacher = this.teachers.find(t => t.id === teacherId);\n          conflicts.push({\n            type: 'teacher',\n            message: `教师 ${(teacher === null || teacher === void 0 ? void 0 : teacher.name) || teacherId} 在同一时间段有多个课程安排`,\n            items: conflictItems\n          });\n        }\n      });\n    });\n    return conflicts;\n  }\n  detectClassroomConflicts() {\n    const conflicts = [];\n    const classroomSchedule = new Map();\n\n    // 按教室分组\n    this.schedule.forEach(item => {\n      if (!classroomSchedule.has(item.classroomId)) {\n        classroomSchedule.set(item.classroomId, []);\n      }\n      classroomSchedule.get(item.classroomId).push(item);\n    });\n\n    // 检查每个教室的时间冲突\n    classroomSchedule.forEach((items, classroomId) => {\n      const timeMap = new Map();\n      items.forEach(item => {\n        const key = `${item.dayOfWeek}-${item.timeSlotId}`;\n        if (!timeMap.has(key)) {\n          timeMap.set(key, []);\n        }\n        timeMap.get(key).push(item);\n      });\n      timeMap.forEach(conflictItems => {\n        if (conflictItems.length > 1) {\n          const classroom = this.classrooms.find(c => c.id === classroomId);\n          conflicts.push({\n            type: 'classroom',\n            message: `教室 ${(classroom === null || classroom === void 0 ? void 0 : classroom.name) || classroomId} 在同一时间段被多个课程占用`,\n            items: conflictItems\n          });\n        }\n      });\n    });\n    return conflicts;\n  }\n  detectClassConflicts() {\n    const conflicts = [];\n    const classSchedule = new Map();\n\n    // 按班级分组\n    this.schedule.forEach(item => {\n      if (!classSchedule.has(item.classId)) {\n        classSchedule.set(item.classId, []);\n      }\n      classSchedule.get(item.classId).push(item);\n    });\n\n    // 检查每个班级的时间冲突\n    classSchedule.forEach((items, classId) => {\n      const timeMap = new Map();\n      items.forEach(item => {\n        const key = `${item.dayOfWeek}-${item.timeSlotId}`;\n        if (!timeMap.has(key)) {\n          timeMap.set(key, []);\n        }\n        timeMap.get(key).push(item);\n      });\n      timeMap.forEach(conflictItems => {\n        if (conflictItems.length > 1) {\n          const classItem = this.classes.find(c => c.id === classId);\n          conflicts.push({\n            type: 'class',\n            message: `班级 ${(classItem === null || classItem === void 0 ? void 0 : classItem.name) || classId} 在同一时间段有多个课程安排`,\n            items: conflictItems\n          });\n        }\n      });\n    });\n    return conflicts;\n  }\n}","map":{"version":3,"names":["SchedulingAlgorithm","constructor","courses","teachers","timeSlots","schedule","sort","a","b","order","generateSchedule","conflicts","classItem","classes","scheduleForClass","detectedConflicts","detectConflicts","push","success","length","message","error","Error","classSchedule","courseId","course","find","c","id","i","frequency","scheduleItem","findBestSlot","sessionIndex","teacher","t","teacherId","availableSlots","getAvailableTimeSlots","scoredSlots","map","slot","score","calculateSlotScore","bestSlot","classroom","assignClassroom","dayOfWeek","timeSlotId","classId","classroomId","day","timeSlot","unavailableSlots","includes","constraints","forbiddenSlots","some","fs","hasTeacherConflict","hasClassConflict","duration","requirements","consecutiveSlots","canScheduleConsecutiveSlots","lunchBreakSlots","ts","dailyClasses","filter","s","maxDailyHours","classrooms","hasClassroomConflict","availableClassrooms","capacity","studentCount","classroomType","type","equipment","hasAllEquipment","every","aWaste","bWaste","item","startTimeSlotId","startSlot","startIndex","indexOf","slotIndex","teacherConflicts","detectTeacherConflicts","classroomConflicts","detectClassroomConflicts","classConflicts","detectClassConflicts","teacherSchedule","Map","forEach","has","set","get","items","timeMap","key","conflictItems","name","classroomSchedule"],"sources":["D:/code/classtable/src/utils/schedulingAlgorithm.ts"],"sourcesContent":["import { \r\n  Course, \r\n  Teacher, \r\n  TimeSlot, \r\n  ScheduleItem, \r\n  Conflict \r\n} from '../types';\r\n\r\nexport interface SchedulingResult {\r\n  schedule: ScheduleItem[];\r\n  conflicts: Conflict[];\r\n  success: boolean;\r\n  message: string;\r\n}\r\n\r\nexport class SchedulingAlgorithm {\r\n  private courses: Course[];\r\n  private teachers: Teacher[];\r\n  private timeSlots: TimeSlot[];\r\n  private schedule: ScheduleItem[];\r\n\r\n  constructor(\r\n    courses: Course[],\r\n    teachers: Teacher[],\r\n    timeSlots: TimeSlot[]\r\n  ) {\r\n    this.courses = courses;\r\n    this.teachers = teachers;\r\n    this.timeSlots = timeSlots.sort((a, b) => a.order - b.order);\r\n    this.schedule = [];\r\n  }\r\n\r\n  // 主排课方法\r\n  public generateSchedule(): SchedulingResult {\r\n    this.schedule = [];\r\n    const conflicts: Conflict[] = [];\r\n\r\n    try {\r\n      // 为每个班级排课\r\n      for (const classItem of this.classes) {\r\n        this.scheduleForClass(classItem);\r\n      }\r\n\r\n      // 检查冲突\r\n      const detectedConflicts = this.detectConflicts();\r\n      conflicts.push(...detectedConflicts);\r\n\r\n      return {\r\n        schedule: this.schedule,\r\n        conflicts,\r\n        success: conflicts.length === 0,\r\n        message: conflicts.length === 0 \r\n          ? '排课成功！' \r\n          : `排课完成，但存在 ${conflicts.length} 个冲突需要解决`\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        schedule: [],\r\n        conflicts,\r\n        success: false,\r\n        message: `排课失败: ${error instanceof Error ? error.message : '未知错误'}`\r\n      };\r\n    }\r\n  }\r\n\r\n  // 为单个班级排课\r\n  private scheduleForClass(classItem: Class): ScheduleItem[] {\r\n    const classSchedule: ScheduleItem[] = [];\r\n    \r\n    for (const courseId of classItem.courses) {\r\n      const course = this.courses.find(c => c.id === courseId);\r\n      if (!course) continue;\r\n\r\n      // 根据频次安排课程\r\n      for (let i = 0; i < course.frequency; i++) {\r\n        const scheduleItem = this.findBestSlot(course, classItem, i);\r\n        if (scheduleItem) {\r\n          classSchedule.push(scheduleItem);\r\n          // 立即将新安排的课程添加到总课表中，以便后续冲突检查\r\n          this.schedule.push(scheduleItem);\r\n        }\r\n      }\r\n    }\r\n\r\n    return classSchedule;\r\n  }\r\n\r\n  // 寻找最佳时间段\r\n  private findBestSlot(course: Course, classItem: Class, sessionIndex: number): ScheduleItem | null {\r\n    const teacher = this.teachers.find(t => t.id === course.teacherId);\r\n    if (!teacher) return null;\r\n\r\n    // 获取可用的时间段\r\n    const availableSlots = this.getAvailableTimeSlots(course, classItem, teacher);\r\n    \r\n    if (availableSlots.length === 0) return null;\r\n\r\n    // 评分并选择最佳时间段\r\n    const scoredSlots = availableSlots.map(slot => ({\r\n      ...slot,\r\n      score: this.calculateSlotScore(slot, course, classItem, teacher)\r\n    }));\r\n\r\n    scoredSlots.sort((a, b) => b.score - a.score);\r\n    const bestSlot = scoredSlots[0];\r\n\r\n    // 分配教室\r\n    const classroom = this.assignClassroom(course, bestSlot.dayOfWeek, bestSlot.timeSlotId);\r\n    if (!classroom) return null;\r\n\r\n    return {\r\n      id: `${course.id}-${classItem.id}-${sessionIndex}`,\r\n      courseId: course.id,\r\n      classId: classItem.id,\r\n      teacherId: course.teacherId,\r\n      classroomId: classroom.id,\r\n      timeSlotId: bestSlot.timeSlotId,\r\n      dayOfWeek: bestSlot.dayOfWeek\r\n    };\r\n  }\r\n\r\n  // 获取可用时间段\r\n  private getAvailableTimeSlots(course: Course, classItem: Class, teacher: Teacher) {\r\n    const availableSlots: { dayOfWeek: number; timeSlotId: string }[] = [];\r\n\r\n    for (let day = 1; day <= 5; day++) { // 周一到周五\r\n      for (const timeSlot of this.timeSlots) {\r\n        // 检查教师是否可用\r\n        if (teacher.unavailableSlots.includes(timeSlot.id)) continue;\r\n\r\n        // 检查是否在禁止时间段\r\n        if (this.constraints.forbiddenSlots.some(\r\n          fs => fs.dayOfWeek === day && fs.timeSlotId === timeSlot.id\r\n        )) continue;\r\n\r\n        // 检查教师冲突\r\n        if (this.hasTeacherConflict(teacher.id, day, timeSlot.id)) continue;\r\n\r\n        // 检查班级冲突\r\n        if (this.hasClassConflict(classItem.id, day, timeSlot.id)) continue;\r\n\r\n        // 检查连续课程要求\r\n        if (course.duration > 1 && course.requirements.consecutiveSlots) {\r\n          if (this.canScheduleConsecutiveSlots(course, day, timeSlot.id, classItem.id, teacher.id)) {\r\n            availableSlots.push({ dayOfWeek: day, timeSlotId: timeSlot.id });\r\n          }\r\n        } else {\r\n          availableSlots.push({ dayOfWeek: day, timeSlotId: timeSlot.id });\r\n        }\r\n      }\r\n    }\r\n\r\n    return availableSlots;\r\n  }\r\n\r\n  // 计算时间段评分\r\n  private calculateSlotScore(\r\n    slot: { dayOfWeek: number; timeSlotId: string },\r\n    course: Course,\r\n    classItem: Class,\r\n    teacher: Teacher\r\n  ): number {\r\n    let score = 100;\r\n\r\n    // 避免午休时间\r\n    if (this.constraints.lunchBreakSlots.includes(slot.timeSlotId)) {\r\n      score -= 20;\r\n    }\r\n\r\n    // 优先上午时间\r\n    const timeSlot = this.timeSlots.find(ts => ts.id === slot.timeSlotId);\r\n    if (timeSlot && timeSlot.order <= 4) {\r\n      score += 10;\r\n    }\r\n\r\n    // 避免周五下午\r\n    if (slot.dayOfWeek === 5 && timeSlot && timeSlot.order > 4) {\r\n      score -= 15;\r\n    }\r\n\r\n    // 检查班级当天已有课程数量\r\n    const dailyClasses = this.schedule.filter(\r\n      s => s.classId === classItem.id && s.dayOfWeek === slot.dayOfWeek\r\n    ).length;\r\n    \r\n    if (dailyClasses >= this.constraints.maxDailyHours) {\r\n      score -= 50;\r\n    }\r\n\r\n    return score;\r\n  }\r\n\r\n  // 分配教室\r\n  private assignClassroom(course: Course, dayOfWeek: number, timeSlotId: string): Classroom | null {\r\n    // 如果课程指定了教室\r\n    if (course.classroomId) {\r\n      const classroom = this.classrooms.find(c => c.id === course.classroomId);\r\n      if (classroom && !this.hasClassroomConflict(classroom.id, dayOfWeek, timeSlotId)) {\r\n        return classroom;\r\n      }\r\n    }\r\n\r\n    // 根据要求筛选教室\r\n    let availableClassrooms = this.classrooms.filter(classroom => {\r\n      // 检查容量\r\n      if (classroom.capacity < course.studentCount) return false;\r\n\r\n      // 检查类型要求\r\n      if (course.requirements.classroomType && \r\n          classroom.type !== course.requirements.classroomType) return false;\r\n\r\n      // 检查设备要求\r\n      if (course.requirements.equipment) {\r\n        const hasAllEquipment = course.requirements.equipment.every(\r\n          equipment => classroom.equipment.includes(equipment)\r\n        );\r\n        if (!hasAllEquipment) return false;\r\n      }\r\n\r\n      // 检查时间冲突\r\n      if (this.hasClassroomConflict(classroom.id, dayOfWeek, timeSlotId)) return false;\r\n\r\n      return true;\r\n    });\r\n\r\n    // 按容量排序，优先选择容量适中的教室\r\n    availableClassrooms.sort((a, b) => {\r\n      const aWaste = a.capacity - course.studentCount;\r\n      const bWaste = b.capacity - course.studentCount;\r\n      return aWaste - bWaste;\r\n    });\r\n\r\n    return availableClassrooms[0] || null;\r\n  }\r\n\r\n  // 检查教师冲突\r\n  private hasTeacherConflict(teacherId: string, dayOfWeek: number, timeSlotId: string): boolean {\r\n    return this.schedule.some(\r\n      item => item.teacherId === teacherId && \r\n               item.dayOfWeek === dayOfWeek && \r\n               item.timeSlotId === timeSlotId\r\n    );\r\n  }\r\n\r\n  // 检查班级冲突\r\n  private hasClassConflict(classId: string, dayOfWeek: number, timeSlotId: string): boolean {\r\n    return this.schedule.some(\r\n      item => item.classId === classId && \r\n               item.dayOfWeek === dayOfWeek && \r\n               item.timeSlotId === timeSlotId\r\n    );\r\n  }\r\n\r\n  // 检查教室冲突\r\n  private hasClassroomConflict(classroomId: string, dayOfWeek: number, timeSlotId: string): boolean {\r\n    return this.schedule.some(\r\n      item => item.classroomId === classroomId && \r\n               item.dayOfWeek === dayOfWeek && \r\n               item.timeSlotId === timeSlotId\r\n    );\r\n  }\r\n\r\n  // 检查是否可以安排连续时间段\r\n  private canScheduleConsecutiveSlots(\r\n    course: Course, \r\n    dayOfWeek: number, \r\n    startTimeSlotId: string,\r\n    classId: string,\r\n    teacherId: string\r\n  ): boolean {\r\n    const startSlot = this.timeSlots.find(ts => ts.id === startTimeSlotId);\r\n    if (!startSlot) return false;\r\n\r\n    const startIndex = this.timeSlots.indexOf(startSlot);\r\n    \r\n    // 检查是否有足够的连续时间段\r\n    for (let i = 0; i < course.duration; i++) {\r\n      const slotIndex = startIndex + i;\r\n      if (slotIndex >= this.timeSlots.length) return false;\r\n\r\n      const timeSlot = this.timeSlots[slotIndex];\r\n      \r\n      // 检查教师和班级冲突\r\n      if (this.hasTeacherConflict(teacherId, dayOfWeek, timeSlot.id) ||\r\n          this.hasClassConflict(classId, dayOfWeek, timeSlot.id)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // 检测冲突\r\n  private detectConflicts(): Conflict[] {\r\n    const conflicts: Conflict[] = [];\r\n\r\n    // 检查教师冲突\r\n    const teacherConflicts = this.detectTeacherConflicts();\r\n    conflicts.push(...teacherConflicts);\r\n\r\n    // 检查教室冲突\r\n    const classroomConflicts = this.detectClassroomConflicts();\r\n    conflicts.push(...classroomConflicts);\r\n\r\n    // 检查班级冲突\r\n    const classConflicts = this.detectClassConflicts();\r\n    conflicts.push(...classConflicts);\r\n\r\n    return conflicts;\r\n  }\r\n\r\n  private detectTeacherConflicts(): Conflict[] {\r\n    const conflicts: Conflict[] = [];\r\n    const teacherSchedule = new Map<string, ScheduleItem[]>();\r\n\r\n    // 按教师分组\r\n    this.schedule.forEach(item => {\r\n      if (!teacherSchedule.has(item.teacherId)) {\r\n        teacherSchedule.set(item.teacherId, []);\r\n      }\r\n      teacherSchedule.get(item.teacherId)!.push(item);\r\n    });\r\n\r\n    // 检查每个教师的时间冲突\r\n    teacherSchedule.forEach((items, teacherId) => {\r\n      const timeMap = new Map<string, ScheduleItem[]>();\r\n      \r\n      items.forEach(item => {\r\n        const key = `${item.dayOfWeek}-${item.timeSlotId}`;\r\n        if (!timeMap.has(key)) {\r\n          timeMap.set(key, []);\r\n        }\r\n        timeMap.get(key)!.push(item);\r\n      });\r\n\r\n      timeMap.forEach(conflictItems => {\r\n        if (conflictItems.length > 1) {\r\n          const teacher = this.teachers.find(t => t.id === teacherId);\r\n          conflicts.push({\r\n            type: 'teacher',\r\n            message: `教师 ${teacher?.name || teacherId} 在同一时间段有多个课程安排`,\r\n            items: conflictItems\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    return conflicts;\r\n  }\r\n\r\n  private detectClassroomConflicts(): Conflict[] {\r\n    const conflicts: Conflict[] = [];\r\n    const classroomSchedule = new Map<string, ScheduleItem[]>();\r\n\r\n    // 按教室分组\r\n    this.schedule.forEach(item => {\r\n      if (!classroomSchedule.has(item.classroomId)) {\r\n        classroomSchedule.set(item.classroomId, []);\r\n      }\r\n      classroomSchedule.get(item.classroomId)!.push(item);\r\n    });\r\n\r\n    // 检查每个教室的时间冲突\r\n    classroomSchedule.forEach((items, classroomId) => {\r\n      const timeMap = new Map<string, ScheduleItem[]>();\r\n      \r\n      items.forEach(item => {\r\n        const key = `${item.dayOfWeek}-${item.timeSlotId}`;\r\n        if (!timeMap.has(key)) {\r\n          timeMap.set(key, []);\r\n        }\r\n        timeMap.get(key)!.push(item);\r\n      });\r\n\r\n      timeMap.forEach(conflictItems => {\r\n        if (conflictItems.length > 1) {\r\n          const classroom = this.classrooms.find(c => c.id === classroomId);\r\n          conflicts.push({\r\n            type: 'classroom',\r\n            message: `教室 ${classroom?.name || classroomId} 在同一时间段被多个课程占用`,\r\n            items: conflictItems\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    return conflicts;\r\n  }\r\n\r\n  private detectClassConflicts(): Conflict[] {\r\n    const conflicts: Conflict[] = [];\r\n    const classSchedule = new Map<string, ScheduleItem[]>();\r\n\r\n    // 按班级分组\r\n    this.schedule.forEach(item => {\r\n      if (!classSchedule.has(item.classId)) {\r\n        classSchedule.set(item.classId, []);\r\n      }\r\n      classSchedule.get(item.classId)!.push(item);\r\n    });\r\n\r\n    // 检查每个班级的时间冲突\r\n    classSchedule.forEach((items, classId) => {\r\n      const timeMap = new Map<string, ScheduleItem[]>();\r\n      \r\n      items.forEach(item => {\r\n        const key = `${item.dayOfWeek}-${item.timeSlotId}`;\r\n        if (!timeMap.has(key)) {\r\n          timeMap.set(key, []);\r\n        }\r\n        timeMap.get(key)!.push(item);\r\n      });\r\n\r\n      timeMap.forEach(conflictItems => {\r\n        if (conflictItems.length > 1) {\r\n          const classItem = this.classes.find(c => c.id === classId);\r\n          conflicts.push({\r\n            type: 'class',\r\n            message: `班级 ${classItem?.name || classId} 在同一时间段有多个课程安排`,\r\n            items: conflictItems\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    return conflicts;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}